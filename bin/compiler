#!/bin/sh
set -x

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# presentations. Runs scripts based on extension or shebang.
#
# Note that .tex files which you wish to compile with XeLaTeX should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.

file=$(readlink -f "$1")
dir=${file%/*}
base="${file%.*}"
ext="${file##*.}"

{ git status >/dev/null && toplevel="$(git rev-parse --show-toplevel)"; } || nogit=1

cd "$dir" || exit 1

textype() {
	textarget="$(getcomproot "$file" || echo "$file")"
	echo "$textarget"
	command="lualatex"
	( head -n5 "$textarget" | grep -qi 'xelatex' ) && command="xelatex"
	$command --output-directory="${textarget%/*}" "${textarget%.*}"
		grep -qi addbibresource "$textarget" &&
		biber --input-directory "${textarget%/*}" "${textarget%.*}" &&
		$command --output-directory="${textarget%/*}" "${textarget%.*}" &&
		$command --output-directory="${textarget%/*}" "${textarget%.*}"
}

markdownc() {
	if  [ -x "$(command -v lowdown)" ]; then
		lowdown --parse-no-intraemph "$file" -Tms | groff -mpdfmark -ms -kept > "$base".pdf
	elif [ -x "$(command -v groffdown)" ]; then
		groffdown -i "$file" | groff > "$base.pdf"
	elif [ -x "$(command -v pandoc)" ]; then
		pandoc -t ms --highlight-style=kate -s -o "$base".pdf "$file"
	else
		echo "Could not find markdown compiler"; exit 2
	fi ;
}

if [ -n "$nogit" ]; then
    if [ -e "$(find "${dir}" -maxdepth 1 -type f -iname 'makefile')" ]; then
        make && exit 0 || exit 1
    elif [ -e "$(find "${toplevel}" -maxdepth 1 -type f -iname 'makefile')" ]; then
    	cd "${toplevel}" && make && exit 0 || exit 1
    fi
fi

case "$(echo "${ext}" | tr '[:upper:]' '[:lower:]')" in
    # Try to keep these cases in alphabetical order.
    [0-9])  preconv "$file" | refer -PS -e | groff -mandoc -T pdf > "$base".pdf ;;
    c)      cc "$file" -o "$base" && "$base" ;;
    cpp)    g++ "$file" -o "$base" && "$base" ;;
    cs)     mcs "$file" && mono "$base".exe ;;
    go)     go run "$file" ;;
    h)      sudo make install ;;
    java)   javac -d classes "$file" && java -cp classes "${1%.*}" ;;
    m)      octave "$file" ;;
    md)     buildMarkdown ;;
    mmd) 	mmdc --input "$file" --output "${base}.pdf" ;;
    mom)    preconv "$file" | refer -PS -e | groff -mom -kept -T pdf > "$base".pdf ;;
    ms)     preconv "$file" | refer -PS -e | groff -me -ms -kept -T pdf > "$base".pdf ;;
    org)    emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
    py)     python "$file" ;;
    rmd) 	Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
    rs)     cargo build ;;
    sass)   sassc -a "$file" "$base.css" ;;
    scad)   openscad -o "$base".stl "$file" ;;
    sent)   setsid -f sent "$file" 2>/dev/null ;;
    tex)    textype "$file" ;;
    *)      sed -n '/^#!/s/^#!//p; q' "$file" | xargs -r -I % "$file" ;;
esac
